<templateSet group="Angular">
  <template name="a-class" value="[class]=&quot;$expression$&quot;" description="Angular [class] binding" toReformat="true" toShortenFQNames="true">
    <variable name="expression" expression="" defaultValue="&quot;expression&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="a-ngClass" value="[ngClass]=&quot;{$cssClass$: $expression$}&quot;" description="Angular ngClass" toReformat="true" toShortenFQNames="true">
    <variable name="cssClass" expression="" defaultValue="&quot;cssClass&quot;" alwaysStopAt="true" />
    <variable name="expression" expression="" defaultValue="&quot;expression&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="a-ngFor" value="*ngFor=&quot;let $item$ of $list$&quot;$END$" description="Angular *ngFor" toReformat="true" toShortenFQNames="true">
    <variable name="item" expression="" defaultValue="&quot;item&quot;" alwaysStopAt="true" />
    <variable name="list" expression="" defaultValue="&quot;list&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="a-ngFor-trackBy" value="*ngFor=&quot;let $item$ of $list$; trackBy:$item$.id&quot;$END$" description="Angular *ngFor with trackBy" toReformat="true" toShortenFQNames="true">
    <variable name="item" expression="" defaultValue="&quot;item&quot;" alwaysStopAt="true" />
    <variable name="list" expression="" defaultValue="&quot;list&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="a-ngForAsync" value="*ngFor=&quot;let $item$ of $stream$ | async as $list$&quot;$END$" description="Angular *ngForAsync" toReformat="true" toShortenFQNames="true">
    <variable name="item" expression="" defaultValue="&quot;item&quot;" alwaysStopAt="true" />
    <variable name="stream" expression="" defaultValue="&quot;stream&quot;" alwaysStopAt="true" />
    <variable name="list" expression="" defaultValue="&quot;list&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="a-formControlName" value="formControlName=&quot;$control$&quot;" description="Angular formControlName" toReformat="true" toShortenFQNames="true">
    <variable name="control" expression="" defaultValue="&quot;control&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="a-formGroup" value="[formGroup]=&quot;$form$&quot;" description="Angular formGroup" toReformat="true" toShortenFQNames="true">
    <variable name="form" expression="" defaultValue="&quot;form&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="a-formGroupName" value="[formGroupName]=&quot;$name$&quot;" description="Angular formGroupName" toReformat="true" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="&quot;name&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="a-ngIf" value="*ngIf=&quot;$expression$&quot;" description="Angular *ngIf" toReformat="true" toShortenFQNames="true">
    <variable name="expression" expression="" defaultValue="&quot;expression&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="a-ngIfElse" value="*ngIf=&quot;$expression$;else $templateName$&quot;" description="Angular *ngIfElse" toReformat="true" toShortenFQNames="true">
    <variable name="expression" expression="" defaultValue="&quot;expression&quot;" alwaysStopAt="true" />
    <variable name="templateName" expression="" defaultValue="&quot;templateName&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="a-ngModel" value="[(ngModel)]=&quot;$binding$&quot;" description="Angular ngModel" toReformat="true" toShortenFQNames="true">
    <variable name="binding" expression="" defaultValue="&quot;binding&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="a-routerLink" value="[routerLink]=&quot;['/$routePath$']&quot; routerLinkActive=&quot;$router_link-active$&quot; $END$" description="Angular routerLink" toReformat="true" toShortenFQNames="true">
    <variable name="routePath" expression="" defaultValue="&quot;routePath&quot;" alwaysStopAt="true" />
    <variable name="router_link-active" expression="" defaultValue="&quot;router-link-active&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="a-routerLink-param" value="[routerLink]=&quot;['$routePath$', $routeParameterValue$]&quot;&#10;routerLinkActive=&quot;$router_link-active$&quot;$END$" description="Angular routerLink with a route parameter" toReformat="true" toShortenFQNames="true">
    <variable name="routePath" expression="" defaultValue="&quot;routePath&quot;" alwaysStopAt="true" />
    <variable name="routeParameterValue" expression="" defaultValue="&quot;routeParameterValue&quot;" alwaysStopAt="true" />
    <variable name="router_link-active" expression="" defaultValue="&quot;router-link-active&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="a-select" value="&lt;select [(ngModel)]=&quot;$model$&quot;&gt;&#10; &lt;option *ngFor=&quot;let $item$ of $list$&quot; [value]=&quot;$item$&quot;&gt;{{$item$}}&lt;/option&gt;&#10;&lt;/select&gt;" description="&lt;select&gt; control with ngModel" toReformat="true" toShortenFQNames="true">
    <variable name="model" expression="" defaultValue="&quot;model&quot;" alwaysStopAt="true" />
    <variable name="item" expression="" defaultValue="&quot;item&quot;" alwaysStopAt="true" />
    <variable name="list" expression="" defaultValue="&quot;list&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="a-ngStyle" value="[ngStyle]=&quot;{$style$: $expression$}&quot;" description="Angular ngStyle" toReformat="true" toShortenFQNames="true">
    <variable name="style" expression="" defaultValue="&quot;style&quot;" alwaysStopAt="true" />
    <variable name="expression" expression="" defaultValue="&quot;expression&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="a-ngSwitch" value="&lt;div [ngSwitch]=&quot;$conditionExpression$&quot;&gt;&#10; &lt;div *ngSwitchCase=&quot;$expression$&quot;&gt;$output$&lt;/div&gt;&#10; &lt;div *ngSwitchDefault&gt;$output2$&lt;/div&gt;&#10;&lt;/div&gt;" description="Angular ngSwitch" toReformat="true" toShortenFQNames="true">
    <variable name="conditionExpression" expression="" defaultValue="&quot;conditionExpression&quot;" alwaysStopAt="true" />
    <variable name="expression" expression="" defaultValue="&quot;expression&quot;" alwaysStopAt="true" />
    <variable name="output" expression="" defaultValue="&quot;output&quot;" alwaysStopAt="true" />
    <variable name="output2" expression="" defaultValue="&quot;output2&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="a-preja" value="&lt;pre&gt;{{$model$ | async | json}}&lt;/pre&gt;$END$" description="Angular pre debug | async | json" toReformat="true" toShortenFQNames="true">
    <variable name="model" expression="" defaultValue="&quot;model&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="a-prej" value="&lt;pre&gt;{{$model$ | json}}&lt;/pre&gt;$END$" description="Angular pre debug | json" toReformat="true" toShortenFQNames="true">
    <variable name="model" expression="" defaultValue="&quot;model&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="a-style" value="[style.$property$]=&quot;$expression$&quot;" description="Angular [style] binding" toReformat="true" toShortenFQNames="true">
    <variable name="property" expression="" defaultValue="&quot;property&quot;" alwaysStopAt="true" />
    <variable name="expression" expression="" defaultValue="&quot;expression&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="a-route-path-404" value="{ path: '**', component: $PathNotFoundComponent$ }$END$" description="Angular 404 route path" toReformat="true" toShortenFQNames="true">
    <variable name="PathNotFoundComponent" expression="" defaultValue="&quot;PathNotFoundComponent&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="a-guard-can-activate" value="import { Injectable } from '@angular/core';&#10;import { ActivatedRouteSnapshot, CanActivate, RouterStateSnapshot } from '@angular/router';&#10;&#10;@Injectable({providedIn: $2$})&#10;export class $Name$Guard implements CanActivate {&#10; constructor() { }&#10;&#10; canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {&#10;  return true;$END$&#10; }&#10;}" description="Angular CanActivate guard" toReformat="true" toShortenFQNames="true">
    <variable name="2" expression="" defaultValue="&quot;'root'&quot;" alwaysStopAt="true" />
    <variable name="Name" expression="" defaultValue="&quot;Name&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="a-guard-can-activate-child" value="import { Injectable } from '@angular/core';&#10;import { ActivatedRouteSnapshot, CanActivateChild, RouterStateSnapshot } from '@angular/router';&#10;&#10;@Injectable({providedIn: $2$})&#10;export class $Name$Guard implements CanActivateChild {&#10; constructor() { }&#10;&#10; canActivateChild(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {&#10;  return true;$END$&#10; }&#10;}" description="Angular CanActivateChild guard" toReformat="true" toShortenFQNames="true">
    <variable name="2" expression="" defaultValue="&quot;'root'&quot;" alwaysStopAt="true" />
    <variable name="Name" expression="" defaultValue="&quot;Name&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="a-guard-can-deactivate" value="import { Injectable } from '@angular/core';&#10;import { ActivatedRouteSnapshot, CanDeactivate, RouterStateSnapshot } from '@angular/router';&#10;import { Observable } from 'rxjs';&#10;&#10;import { $ComponentName$Component } from './$filename$.component';&#10;&#10;// Consider using this interface for all CanDeactivate guards,&#10;// and have your components implement this interface, too.&#10;//&#10;//   e.g. export class CanDeactivateGuard implements CanDeactivate&lt;CanComponentDeactivate&gt; {&#10;//&#10;// export interface CanComponentDeactivate {&#10;// canDeactivate: () =&gt; any;&#10;// }&#10;&#10;@Injectable({providedIn: $4$})&#10;export class $Name$Guard implements CanDeactivate&lt;$ComponentName$Component&gt; {&#10; canDeactivate(&#10;  component: $ComponentName$Component,&#10;  currentRoute: ActivatedRouteSnapshot, &#10;  currentState: RouterStateSnapshot&#10; ): Observable&lt;boolean&gt;|Promise&lt;boolean&gt;|boolean {&#10;  return false;$END$&#10; }&#10;}" description="Angular CanDeactivate guard" toReformat="true" toShortenFQNames="true">
    <variable name="4" expression="" defaultValue="&quot;'root'&quot;" alwaysStopAt="true" />
    <variable name="ComponentName" expression="" defaultValue="&quot;ComponentName&quot;" alwaysStopAt="true" />
    <variable name="filename" expression="lowercaseAndDash(ComponentName)" defaultValue="" alwaysStopAt="true" />
    <variable name="Name" expression="" defaultValue="&quot;Name&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="a-guard-can-load" value="import { Injectable } from '@angular/core';&#10;import { CanLoad, Route } from '@angular/router';&#10;&#10;@Injectable({providedIn: $2$})&#10;export class $Name$Guard implements CanLoad {&#10; constructor() { }&#10;&#10; canLoad(route: Route) {&#10;  return true;$END$&#10; }&#10;}" description="Angular CanLoad guard" toReformat="true" toShortenFQNames="true">
    <variable name="2" expression="" defaultValue="&quot;'root'&quot;" alwaysStopAt="true" />
    <variable name="Name" expression="" defaultValue="&quot;Name&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="a-component" value="import { Component, OnInit } from '@angular/core';&#10;&#10;@Component({&#10; selector: '$selector_name$',&#10; templateUrl: '$name$.component.html'&#10;})&#10;&#10;export class $Name$Component implements OnInit {&#10; constructor() { }&#10;&#10; ngOnInit() { }$END$&#10;}" description="Angular component" toReformat="true" toShortenFQNames="true">
    <variable name="Name" expression="" defaultValue="&quot;Name&quot;" alwaysStopAt="true" />
    <variable name="name" expression="lowercaseAndDash(Name)" defaultValue="" alwaysStopAt="true" />
    <variable name="selector_name" expression="lowercaseAndDash(Name)" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="a-component-inline" value="import { Component, OnInit } from '@angular/core';&#10;&#10;@Component({&#10; selector: '$selector_name$',&#10; template: `$END$`&#10;})&#10;&#10;export class $Name$Component implements OnInit {&#10; constructor() { }&#10;&#10; ngOnInit() { }&#10;}" description="Angular component with an inline template" toReformat="true" toShortenFQNames="true">
    <variable name="Name" expression="" defaultValue="&quot;Name&quot;" alwaysStopAt="true" />
    <variable name="selector_name" expression="lowercaseAndDash(Name)" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="a-preload-strategy" value="import { PreloadingStrategy, Route } from '@angular/router';&#10;import { Observable, of } from 'rxjs';&#10;&#10;export class PreloadSelectedModulesList implements PreloadingStrategy {&#10; preload(route: Route, load: Function): Observable&lt;any&gt; {&#10;  return route.data &amp;&amp; route.data['$preload$'] ? load() : of(null);&#10; }&#10;}&#10;$END$" description="Angular custom preload strategy" toReformat="true" toShortenFQNames="true">
    <variable name="preload" expression="" defaultValue="&quot;preload&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="a-route-path-default" value="{ path: '', pathMatch: 'full', redirectTo: '$path$' }$END$" description="Angular default route path" toReformat="true" toShortenFQNames="true">
    <variable name="path" expression="" defaultValue="&quot;path&quot;" alwaysStopAt="true" />
    <context />
  </template>
</templateSet>